---
import { languages } from "../i18n/ui";
import { getLangFromUrl, getTranslatedPath, getRouteFromUrl } from "../i18n/utils";
import { Image } from "astro:assets";
import chevronDown from "../images/chevron-down.svg";

const currentLang = getLangFromUrl(Astro.url);
const currentRouteKey = getRouteFromUrl(Astro.url) ?? null;
---

<div class="language-picker relative">
  <button class="language-picker-button flex items-center gap-2 px-1 py-1 text-xl" aria-label="Vybrať jazyk">
    <span>{languages[currentLang as keyof typeof languages]}</span>

    <Image src={chevronDown} alt="chevron down" class="w-4 h-4 transition-transform duration-200" loading="eager" />
  </button>

  <div style="background-color: var(--color-background);" class="language-picker-dropdown absolute top-full left-0 mt-1 border border-border rounded-md opacity-0 invisible pointer-events-none transform scale-95 transition-all duration-200 z-50">
    {
      Object.entries(languages).map(
        ([lang, label]) => 
          currentLang !== lang && (
            <a href={getTranslatedPath(currentRouteKey, lang)} class="block px-3 py-2 text-xl hover:bg-primary hover:text-background transition-colors first:rounded-t-md last:rounded-b-md" aria-label={label} >{label}</a>
          )
      )
    }
  </div>
</div>

<style>
  .language-picker-button:focus + .language-picker-dropdown,
  .language-picker:hover .language-picker-dropdown {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
    transform: scale(1);
  }

  .language-picker:hover .language-picker-button img {
    transform: rotate(180deg);
  }
</style>

<script>
  // JavaScript pre lepšiu interaktivitu
  document.addEventListener("DOMContentLoaded", function () {
    const languagePickers = document.querySelectorAll(".language-picker");

    languagePickers.forEach((picker) => {
      const button = picker.querySelector(
        ".language-picker-button"
      ) as HTMLButtonElement;
      const dropdown = picker.querySelector(
        ".language-picker-dropdown"
      ) as HTMLElement;
      const chevron = picker.querySelector("img") as HTMLImageElement;

      if (!button || !dropdown || !chevron) return;

      let isOpen = false;

      function toggleDropdown() {
        isOpen = !isOpen;

        if (isOpen) {
          dropdown.style.opacity = "1";
          dropdown.style.visibility = "visible";
          dropdown.style.pointerEvents = "auto";
          dropdown.style.transform = "scale(1)";
          chevron.style.transform = "rotate(180deg)";
        } else {
          dropdown.style.opacity = "0";
          dropdown.style.visibility = "invisible";
          dropdown.style.pointerEvents = "none";
          dropdown.style.transform = "scale(0.95)";
          chevron.style.transform = "rotate(0deg)";
        }
      }

      function closeDropdown() {
        isOpen = false;
        dropdown.style.opacity = "0";
        dropdown.style.visibility = "invisible";
        dropdown.style.pointerEvents = "none";
        dropdown.style.transform = "scale(0.95)";
        chevron.style.transform = "rotate(0deg)";
      }

      // Toggle na klik
      button.addEventListener("click", (e) => {
        e.preventDefault();
        toggleDropdown();
      });

      // Zatvorenie pri kliknutí mimo
      document.addEventListener("click", (e) => {
        if (!picker.contains(e.target as Node)) {
          closeDropdown();
        }
      });

      // Zatvorenie pri ESC
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && isOpen) {
          closeDropdown();
        }
      });
    });
  });
</script>
